{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"header\"\n};\nconst _hoisted_2 = {\n  class: \"content\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_SpaHeader = _resolveComponent(\"SpaHeader\");\n\n  const _component_router_view = _resolveComponent(\"router-view\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_SpaHeader)]), _createElementVNode(\"div\", _hoisted_2, [_createTextVNode(_toDisplayString($data.postList) + \" \", 1\n  /* TEXT */\n  ), _createVNode(_component_router_view)])], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;AACOA,OAAK,EAAC;;;AAGNA,OAAK,EAAC;;;;;;;6DAHXC,oBAEM,KAFN,cAEM,CADNC,aAAYC,oBAAZ,CACM,CAFN,GAGAF,oBAGM,KAHN,cAGM,mCAFFG,kBAAU,KACd;AAAA;GACM,EADNF,aAAcG,sBAAd,CACM,CAHN","names":["class","_createElementVNode","_createVNode","_component_SpaHeader","$data","_component_router_view"],"sourceRoot":"","sources":["/Users/nikitavysokij/Desktop/MYPROJECTS/best-spa/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"header\">\n  <SpaHeader/>\n  </div>\n  <div class=\"content\">\n    {{postList}}\n  <router-view/>\n  </div>\n</template>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n\n.content{\n  margin-top: 30px;\n}\n\n\n</style>\n<script>\n\nimport SpaHeader from \"@/components/SpaHeader\";\nimport axios from \"axios\";\nexport default {\n  components: {SpaHeader},\n  data(){\n    return{\n      postList:['hey','you',1]\n    }\n  },\n  mounted() {\n    axios('https://jsonplaceholder.typicode.com/posts').then((responce)=>{\n      this.postList=responce.data\n    })\n\n  },provide(){\n    return{\n      postList:this.postList\n    }\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}